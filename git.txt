git分布式版本管理系统
1.首先需要设置全局的user.name和user.email,也可对单独的仓库（repository）进行设置
git config --global user.name "xx"
git config --global user.email "xx"
2.创建git仓库（文件夹）通过git bash 输入框找到需要成为仓库的文件夹，输入 git init
a.将文件提交到缓存区 git add 文件名
b.将文件提交到仓库 git commit -m "注释"
3.git常用命令：
a、git status 查看当前是否还有文件未提交（当文件被修改后不管有没有add git都能检测到，也可查看修改内容）
b、git diff 文件名 查看文件内容的改动情况
4.版本回退
a、git log --pretty=oneline 将日志输出简化
b、版本回退 git reset --hard HEAD^回退2个版本git reset --hard HEAD^^回退100个版本git reset --hard HEAD^~100
c、通过版本号回退制定位置git reset --hard 版本号
d、git relog 查看所有的版本号
e、cat 文件名，查看文件内容
5、理解工作区与暂存区的区别？
　　工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
　　版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
　　我们前面说过使用Git提交文件到版本库有两步：
　　第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
　　第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
6、git撤销修改和删除文件操作
在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
　　第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
　　第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  --hard HEAD^
git checkout  -- file 可以丢弃工作区的修改，如下命令：
git checkout  --  文件名
命令 git checkout --文件名 意思就是，把xxx文件在工作区做的修改全部撤销，这里有2种情况，如下：

xxx自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
另外一种是xxx已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
7、远程仓库。
在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
ssh-keygen  -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
点击 Add Key，你就应该可以看到已经添加的key。
如何添加远程库？
　　现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。

　　首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库
目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

　　现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：

　　git remote add origin https://github.com/tugenhua0707/testgit.git

　　所有的如下：
把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。

　　由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
从现在起，只要本地作了提交，就可以通过如下命令：

　　git push origin master

　　把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。